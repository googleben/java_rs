use crate::cp::CPIndex;

/// struct representing JVM opcodes
/// for more information refer to the [JVM specification](https://docs.oracle.com/javase/specs/jvms/se8/html/index.html)
#[allow(non_camel_case_types)]
#[derive(Debug, Clone)]
pub enum Opcode {
    aaload,
    aastore,
    aconst_null,
    aload { index: u8 },
    aload_0,
    aload_1,
    aload_2,
    aload_3,
    anewarray { index: CPIndex },
    areturn,
    arraylength,
    astore { index: u8 },
    astore_0,
    astore_1,
    astore_2,
    astore_3,
    athrow,
    baload,
    bastore,
    bipush { val: u8 },
    breakpoint,
    caload,
    castore,
    checkcast { index: CPIndex },
    d2f,
    d2i,
    d2l,
    dadd,
    daload,
    dastore,
    dcmpg,
    dcmpl,
    dconst_0,
    dconst_1,
    ddiv,
    dload { index: u8 },
    dload_0,
    dload_1,
    dload_2,
    dload_3,
    dmul,
    dneg,
    drem,
    dreturn,
    dstore { index: u8 },
    dstore_0,
    dstore_1,
    dstore_2,
    dstore_3,
    dsub,
    dup,
    dup_x1,
    dup_x2,
    dup2,
    dup2_x1,
    dup2_x2,
    f2d,
    f2i,
    f2l,
    fadd,
    faload,
    fastore,
    fcmpg,
    fcmpl,
    fconst_0,
    fconst_1,
    fconst_2,
    fdiv,
    fload { index: u8 },
    fload_0,
    fload_1,
    fload_2,
    fload_3,
    fmul,
    fneg,
    frem,
    freturn,
    fstore { index: u8 },
    fstore_0,
    fstore_1,
    fstore_2,
    fstore_3,
    fsub,
    getfield { index: CPIndex },
    getstatic { index: CPIndex },
    goto { branch: i16 },
    goto_w { branch: i32 },
    i2b,
    i2c,
    i2d,
    i2f,
    i2l,
    i2s,
    iadd,
    iaload,
    iand,
    iastore,
    iconst_m1,
    iconst_0,
    iconst_1,
    iconst_2,
    iconst_3,
    iconst_4,
    iconst_5,
    idiv,
    if_acmpeq { branch: i16 },
    if_acmpne { branch: i16 },
    if_icmpeq { branch: i16 },
    if_icmpge { branch: i16 },
    if_icmpgt { branch: i16 },
    if_icmple { branch: i16 },
    if_icmplt { branch: i16 },
    if_icmpne { branch: i16 },
    ifeq { branch: i16 },
    ifge { branch: i16 },
    ifgt { branch: i16 },
    ifle { branch: i16 },
    iflt { branch: i16 },
    ifne { branch: i16 },
    ifnonnull { branch: i16 },
    ifnull { branch: i16 },
    iinc { index: u8, const_: i8 },
    iload { index: u8 },
    iload_0,
    iload_1,
    iload_2,
    iload_3,
    imul,
    ineg,
    instanceof { index: CPIndex },
    invokedynamic { index: CPIndex },
    invokeinterface { index: CPIndex, count: u8 },
    invokespecial { index: CPIndex },
    invokestatic { index: CPIndex },
    invokevirtual { index: CPIndex },
    ior,
    irem,
    ireturn,
    ishl,
    ishr,
    istore { index: u8 },
    istore_0,
    istore_1,
    istore_2,
    istore_3,
    isub,
    iushr,
    ixor,
    jsr { branch: i16 },
    jsr_w { branch: i32 },
    l2d,
    l2f,
    l2i,
    ladd,
    laload,
    land,
    lastore,
    lcmp,
    lconst_0,
    lconst_1,
    ldc { index: CPIndex },
    ldc_w { index: CPIndex },
    ldc2_w { index: CPIndex },
    ldiv,
    lload_0,
    lload_1,
    lload_2,
    lload_3,
    lload { index: u8 },
    lmul,
    lneg,
    lookupswitch { default: i32, match_offset_pairs: Vec<(i32, i32)>, padding: u8 },
    lor,
    lrem,
    lreturn,
    lshl,
    lshr,
    lstore { index: u8 },
    lstore_0,
    lstore_1,
    lstore_2,
    lstore_3,
    lsub,
    lushr,
    lxor,
    monitorenter,
    monitorexit,
    multianewarray { index: CPIndex, dimensions: u8 },
    new { index: CPIndex },
    newarray { atype: u8 },
    nop,
    pop,
    pop2,
    putfield { index: CPIndex },
    putstatic { index: CPIndex },
    ret { index: u8 },
    return_,
    saload,
    sastore,
    sipush { val: u16 },
    swap,
    tableswitch { default: i32, low: i32, high: i32, jump_offsets: Vec<i32>, padding: u8 },
    wide { opcode: u8, index: u16 },
    wide_iinc { index: u16, const_: i16 },

    reserved,
    impdep1,
    impdep2,
}

impl Opcode {

    pub fn len_bytes(&self) -> usize {
        use self::Opcode::*;
        match self {
            nop => 1,
            aconst_null => 1,
            iconst_m1 => 1,
            iconst_0 => 1,
            iconst_1 => 1,
            iconst_2 => 1,
            iconst_3 => 1,
            iconst_4 => 1,
            iconst_5 => 1,
            lconst_0 => 1,
            lconst_1 => 1,
            fconst_0 => 1,
            fconst_1 => 1,
            fconst_2 => 1,
            dconst_0 => 1,
            dconst_1 => 1,
            bipush { .. } => 2,
            sipush { .. } => 3,
            ldc { .. } => 2,
            ldc_w { .. } => 3,
            ldc2_w { .. } => 3,
            iload { .. } => 2,
            lload { .. } => 2,
            fload { .. } => 2,
            dload { .. } => 2,
            aload { .. } => 2,
            iload_0 => 1,
            iload_1 => 1,
            iload_2 => 1,
            iload_3 => 1,
            lload_0 => 1,
            lload_1 => 1,
            lload_2 => 1,
            lload_3 => 1,
            fload_0 => 1,
            fload_1 => 1,
            fload_2 => 1,
            fload_3 => 1,
            dload_0 => 1,
            dload_1 => 1,
            dload_2 => 1,
            dload_3 => 1,
            aload_0 => 1,
            aload_1 => 1,
            aload_2 => 1,
            aload_3 => 1,
            iaload => 1,
            laload => 1,
            faload => 1,
            daload => 1,
            aaload => 1,
            baload => 1,
            caload => 1,
            saload => 1,
            istore { .. } => 2,
            lstore { .. } => 2,
            fstore { .. } => 2,
            dstore { .. } => 2,
            astore { .. } => 2,
            istore_0 => 1,
            istore_1 => 1,
            istore_2 => 1,
            istore_3 => 1,
            lstore_0 => 1,
            lstore_1 => 1,
            lstore_2 => 1,
            lstore_3 => 1,
            fstore_0 => 1,
            fstore_1 => 1,
            fstore_2 => 1,
            fstore_3 => 1,
            dstore_0 => 1,
            dstore_1 => 1,
            dstore_2 => 1,
            dstore_3 => 1,
            astore_0 => 1,
            astore_1 => 1,
            astore_2 => 1,
            astore_3 => 1,
            iastore => 1,
            lastore => 1,
            fastore => 1,
            dastore => 1,
            aastore => 1,
            bastore => 1,
            castore => 1,
            sastore => 1,
            pop => 1,
            pop2 => 1,
            dup => 1,
            dup_x1 => 1,
            dup_x2 => 1,
            dup2 => 1,
            dup2_x1 => 1,
            dup2_x2 => 1,
            swap => 1,
            iadd => 1,
            ladd => 1,
            fadd => 1,
            dadd => 1,
            isub => 1,
            lsub => 1,
            fsub => 1,
            dsub => 1,
            imul => 1,
            lmul => 1,
            fmul => 1,
            dmul => 1,
            idiv => 1,
            ldiv => 1,
            fdiv => 1,
            ddiv => 1,
            irem => 1,
            lrem => 1,
            frem => 1,
            drem => 1,
            ineg => 1,
            lneg => 1,
            fneg => 1,
            dneg => 1,
            ishl => 1,
            lshl => 1,
            ishr => 1,
            lshr => 1,
            iushr => 1,
            lushr => 1,
            iand => 1,
            land => 1,
            ior => 1,
            lor => 1,
            ixor => 1,
            lxor => 1,
            iinc { .. } => 3,
            i2l => 1,
            i2f => 1,
            i2d => 1,
            l2i => 1,
            l2f => 1,
            l2d => 1,
            f2i => 1,
            f2l => 1,
            f2d => 1,
            d2i => 1,
            d2l => 1,
            d2f => 1,
            i2b => 1,
            i2c => 1,
            i2s => 1,
            lcmp => 1,
            fcmpl => 1,
            fcmpg => 1,
            dcmpl => 1,
            dcmpg => 1,
            ifeq { .. } => 3,
            ifne { .. } => 3,
            iflt { .. } => 3,
            ifge { .. } => 3,
            ifgt { .. } => 3,
            ifle { .. } => 3,
            if_icmpeq { .. } => 3,
            if_icmpne { .. } => 3,
            if_icmplt { .. } => 3,
            if_icmpge { .. } => 3,
            if_icmpgt { .. } => 3,
            if_icmple { .. } => 3,
            if_acmpeq { .. } => 3,
            if_acmpne { .. } => 3,
            goto { .. } => 3,
            jsr { .. } => 3,
            ret { .. } => 2,
            tableswitch { jump_offsets, padding, .. } => {
                17 + (4 * jump_offsets.len()) + (*padding as usize)
            }
            lookupswitch { match_offset_pairs, padding,  .. } => {
                9 + (8 * match_offset_pairs.len()) + (*padding as usize)
            }
            ireturn => 1,
            lreturn => 1,
            freturn => 1,
            dreturn => 1,
            areturn => 1,
            return_ => 1,
            getstatic { .. } => 3,
            putstatic { .. } => 3,
            getfield { .. } => 3,
            putfield { .. } => 3,
            invokevirtual { .. } => 3,
            invokespecial { .. } => 3,
            invokestatic { .. } => 3,
            invokeinterface { .. } => 5,
            invokedynamic { .. } => 5,
            new { .. } => 3,
            newarray { .. } => 2,
            anewarray { .. } => 3,
            arraylength => 1,
            athrow => 1,
            checkcast { .. } => 3,
            instanceof { .. } => 3,
            monitorenter => 1,
            monitorexit => 1,
            wide { .. } => 4,
            wide_iinc { .. } => 5,
            multianewarray { .. } => 4,
            ifnull { .. } => 3,
            ifnonnull { .. } => 3,
            goto_w { .. } => 5,
            jsr_w { .. } => 5,
            breakpoint => 1,
            reserved => 1,
            impdep1 => 1,
            impdep2 => 1
        }
    }

}